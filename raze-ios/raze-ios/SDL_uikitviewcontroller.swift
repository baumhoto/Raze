//
//  SDL_uikitviewcontroller.swift
//  vkQuake-iOS
//
//  Created by Tobias Baumh√∂ver on 06.07.21.
//

import UIKit

extension SDL_uikitviewcontroller {
    
    open override var prefersPointerLocked: Bool {
        return true
    }
    
    open override var prefersStatusBarHidden: Bool {
        return true
    }
    
    open override var preferredScreenEdgesDeferringSystemGestures: UIRectEdge {
        return .bottom
    }
    
    open override var prefersHomeIndicatorAutoHidden: Bool {
        //setNeedsUpdateOfPrefersPointerLocked()
        return true
    }
}

extension SDL_uikitview {

    open override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        return

//        let touch = touches.first
//
//         @available(iOS 13.4, *) {
//            if (touch?.type == UITouch.TouchType.indirectPointer) {
//                       // ignore touch event generated by HW mouse
//                       return;
//            }
//        }
//
//        super.touchesBegan(touches, with: event)
    }

    open override func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?) {

        return

//        for touch in touches
//            {
//                if (touch.type == UITouch.TouchType.indirectPointer) {
//                       // ignore touch event generated by HW mouse
//                       return;
//            }
//            super.touchesEnded(touches, with: event)
//        }
    }
    
    open override func pressesBegan(_ presses: Set<UIPress>, with event: UIPressesEvent?) {
        // Run backward or forward when the user presses a left or right arrow key.
        
        return
//        var didHandleEvent = false
////        for press in presses {
////            guard let key = press.key else { continue }
////            if key.charactersIgnoringModifiers == UIKeyCommand.inputLeftArrow {
////                runBackward()
////                didHandleEvent = true
////            }
////            if key.charactersIgnoringModifiers == UIKeyCommand.inputRightArrow {
////                runForward()
////                didHandleEvent = true
////            }
////        }
//
//        if didHandleEvent == false {
//            // Didn't handle this key press, so pass the event to the next responder.
//            //super.pressesBegan(presses, with: event)
//        }
    }
    
    open override func pressesEnded(_ presses: Set<UIPress>, with event: UIPressesEvent?) {
        // Stop running when the user releases the left or right arrow key.
        return

//        var didHandleEvent = false
////        for press in presses {
////            guard let key = press.key else { continue }
////            if key.charactersIgnoringModifiers == UIKeyCommand.inputLeftArrow {
////                stopRunningBackward()
////                didHandleEvent = true
////            }
////            if key.charactersIgnoringModifiers == UIKeyCommand.inputRightArrow {
////                stopRunningForward()
////                didHandleEvent = true
////            }
////        }
//
//        if didHandleEvent == false {
//            // Didn't handle this key press, so pass the event to the next responder.
//            super.pressesEnded(presses, with: event)
//        }
    }

    

    open override var isMultipleTouchEnabled: Bool {
        get {
                    return false
                }
                set {
                    super.isMultipleTouchEnabled = false
                }
    }

//    open override func touchesMoved(_ touches: Set<UITouch>, with event: UIEvent?) {
//        return
//    }
}

//extension SDL_uikitappdelegate {
//    open override func applicationWillTerminate(_ application: UIApplication) {
//        Print("app will terminat3e")
//    }
//}
